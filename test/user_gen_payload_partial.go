// This file is auto-generated by makes-code ... do not edit

package types

import (
	"encoding/json"
)

type UserPayloadPartials []*UserPayloadPartial

type UserPayloadPartial struct {
	userData
}

type userPayloadPartial struct {
	ID   string `json:"id"`
	Name string `json:"n"`
}

func ToUserPayloadPartial(u User) *UserPayloadPartial {
	return &UserPayloadPartial{userData{
		id:   u.ID(),
		name: u.Name(),
	}}
}

func (u UserPayloadPartial) MarshalJSON() ([]byte, error) {
	return json.Marshal(userPayloadPartial{
		ID:   u.id,
		Name: u.name,
	})
}

func (u *UserPayloadPartial) UnmarshalJSON(data []byte) error {
	var tmp userPayloadPartial
	if err := json.Unmarshal(data, &tmp); err != nil {
		return err
	}

	u.userData = userData{
		id:   tmp.ID,
		name: tmp.Name,
	}
	return nil
}

func ToUserPayloadPartials(users Users) UserPayloadPartials {
	docs := make(UserPayloadPartials, len(users))
	for i, user := range users {
		docs[i] = ToUserPayloadPartial(user)
	}
	return docs
}

func (docs UserPayloadPartials) Users() Users {
	users := make(Users, len(docs))
	for i, doc := range docs {
		users[i] = doc
	}
	return users
}
