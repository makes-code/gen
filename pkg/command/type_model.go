package command

import (
	"fmt"

	"github.com/makes-code/gen/internal/cli"
	"github.com/makes-code/gen/internal/inspect"

	mcli "github.com/mitchellh/cli"
)

func TypeModel() (mcli.Command, error) {
	return &cli.CmdCodegen{
		CmdMeta: cli.CmdMeta{
			Name:     "model",
			Help:     "Generate a model",
			Synopsis: "Generate a model",
		},
		FileName: func(systemName string) string {
			return fmt.Sprintf("%s_gen.go", systemName)
		},
		Runner: func(data inspect.Data) (string, interface{}, error) {
			return tmplModel, data, nil
		},
	}, nil
}

var tmplModel = `
{{$ := .Names}}
// This file is generated by makes-code ... do not edit

package {{.Pkg}}

{{if not .Imports.Empty}}
import ({{range .Imports.Groups}}
{{range .}}  {{.}}
{{end -}}
{{end}})
{{end}}

type {{$.Public}}s []{{$.Public}}

type {{$.Private}}Data struct {
{{range .Fields}}  {{.Names.Private}} {{.Type}}
{{end -}}
}
{{range .Fields}}
func ({{$.Short}} *{{$.Private}}Data) {{.Names.Public}}() {{.Type}} { return {{$.Short}}.{{.Names.Private}} }
{{- end}}
func ({{$.Short}} *{{$.Private}}Data) Builder() *{{$.Public}}Builder {
  return New{{$.Public}}Builder(){{range .Fields}}.
    With{{.Names.Public}}({{$.Short}}.{{.Names.Private}}){{end}}
}

// {{$.Public}}Builder is a {{$.Display}} builder
type {{$.Public}}Builder struct {
  data {{$.Private}}Data
}

// New{{$.Public}}Builder returns a new {{$.Display}} builder
func New{{$.Public}}Builder() *{{$.Public}}Builder {
  return &{{$.Public}}Builder{}
}
{{range .Fields}}
// With{{.Names.Public}} sets the {{$.Display}} {{.Names.Display}}
func (builder *{{$.Public}}Builder) With{{.Names.Public}}({{.Names.Private}} {{.Type}}) *{{$.Public}}Builder {
  builder.data.{{.Names.Private}} = {{.Names.Private}}
  return builder
}
{{end}}
// Data returns the {{$.Display}} data
func (builder *{{$.Public}}Builder) Data() {{$.Public}} { return &builder.data }

// Build validates and returns the built {{$.Display}}
func (builder *{{$.Public}}Builder) Build() ({{$.Public}}, error) {
  if err := prebuild(builder); err != nil {
    return nil, err
  }
  return &builder.data, nil
}

// MustBuild returns the built {{$.Display}} and panics if any validation error occurs
func (builder *{{$.Public}}Builder) MustBuild() {{$.Public}} {
  built, err := builder.Build()
  if err != nil {
    panic("failed to build {{$.Display}}: " + err.Error())
  }
  return built
}
`
